{
 "definitions": {
  "OpenAI.API": {
   "kind": "service",
   "@Capabilities.BatchSupported": false,
   "@Capabilities.KeyAsSegmentSupported": true,
   "@Core.Description": "OpenAI API",
   "@Core.SchemaVersion": "2.0.0",
   "@Core.LongDescription": "APIs for sampling from and fine-tuning language models"
  },
  "OpenAI.API.chat_completions_post": {
   "kind": "action",
   "params": {
    "body": {
     "type": "OpenAI.API_types.CreateChatCompletionRequest",
     "@openapi.in": "body"
    }
   },
   "@Common.Label": "OpenAI",
   "@Core.Description": "Creates a model response for the given chat conversation.",
   "@openapi.path": "/chat/completions",
   "returns": {
    "type": "OpenAI.API_types.CreateChatCompletionResponse"
   }
  },
  "OpenAI.API.completions_post": {
   "kind": "action",
   "params": {
    "body": {
     "type": "OpenAI.API_types.CreateCompletionRequest",
     "@openapi.in": "body"
    }
   },
   "@Common.Label": "OpenAI",
   "@Core.Description": "Creates a completion for the provided prompt and parameters.",
   "@openapi.path": "/completions",
   "returns": {
    "type": "OpenAI.API_types.CreateCompletionResponse"
   }
  },
  "OpenAI.API.edits_post": {
   "kind": "action",
   "params": {
    "body": {
     "type": "OpenAI.API_types.CreateEditRequest",
     "@openapi.in": "body"
    }
   },
   "@Common.Label": "OpenAI",
   "@Core.Description": "Creates a new edit for the provided input, instruction, and parameters.",
   "@openapi.path": "/edits",
   "returns": {
    "type": "OpenAI.API_types.CreateEditResponse"
   }
  },
  "OpenAI.API.images_generations_post": {
   "kind": "action",
   "params": {
    "body": {
     "type": "OpenAI.API_types.CreateImageRequest",
     "@openapi.in": "body"
    }
   },
   "@Common.Label": "OpenAI",
   "@Core.Description": "Creates an image given a prompt.",
   "@openapi.path": "/images/generations",
   "returns": {
    "type": "OpenAI.API_types.ImagesResponse"
   }
  },
  "OpenAI.API.images_edits_post": {
   "kind": "action",
   "params": {},
   "@Common.Label": "OpenAI",
   "@Core.Description": "Creates an edited or extended image given an original image and a prompt.",
   "@openapi.path": "/images/edits",
   "returns": {
    "type": "OpenAI.API_types.ImagesResponse"
   }
  },
  "OpenAI.API.images_variations_post": {
   "kind": "action",
   "params": {},
   "@Common.Label": "OpenAI",
   "@Core.Description": "Creates a variation of a given image.",
   "@openapi.path": "/images/variations",
   "returns": {
    "type": "OpenAI.API_types.ImagesResponse"
   }
  },
  "OpenAI.API.embeddings_post": {
   "kind": "action",
   "params": {
    "body": {
     "type": "OpenAI.API_types.CreateEmbeddingRequest",
     "@openapi.in": "body"
    }
   },
   "@Common.Label": "OpenAI",
   "@Core.Description": "Creates an embedding vector representing the input text.",
   "@openapi.path": "/embeddings",
   "returns": {
    "type": "OpenAI.API_types.CreateEmbeddingResponse"
   }
  },
  "OpenAI.API.audio_transcriptions_post": {
   "kind": "action",
   "params": {},
   "@Common.Label": "OpenAI",
   "@Core.Description": "Transcribes audio into the input language.",
   "@openapi.path": "/audio/transcriptions",
   "returns": {
    "type": "OpenAI.API_types.CreateTranscriptionResponse"
   }
  },
  "OpenAI.API.audio_translations_post": {
   "kind": "action",
   "params": {},
   "@Common.Label": "OpenAI",
   "@Core.Description": "Translates audio into English.",
   "@openapi.path": "/audio/translations",
   "returns": {
    "type": "OpenAI.API_types.CreateTranslationResponse"
   }
  },
  "OpenAI.API.files": {
   "kind": "function",
   "params": {},
   "@Common.Label": "OpenAI",
   "@Core.Description": "Returns a list of files that belong to the user's organization.",
   "@openapi.path": "/files",
   "returns": {
    "type": "OpenAI.API_types.ListFilesResponse"
   }
  },
  "OpenAI.API.files_post": {
   "kind": "action",
   "params": {},
   "@Common.Label": "OpenAI",
   "@Core.Description": "Upload a file that contains document(s) to be used across various endpoints/features. Currently, the size of all the files uploaded by one organization can be up to 1 GB. Please contact us if you need to increase the storage limit.\n",
   "@openapi.path": "/files",
   "returns": {
    "type": "OpenAI.API_types.OpenAIFile"
   }
  },
  "OpenAI.API.files__delete": {
   "kind": "action",
   "params": {
    "file_id": {
     "type": "cds.String",
     "@description": "The ID of the file to use for this request",
     "@openapi.in": "path"
    }
   },
   "@Common.Label": "OpenAI",
   "@Core.Description": "Delete a file.",
   "@openapi.method": "DELETE",
   "@openapi.path": "/files/{file_id}",
   "returns": {
    "type": "OpenAI.API_types.DeleteFileResponse"
   }
  },
  "OpenAI.API.files_": {
   "kind": "function",
   "params": {
    "file_id": {
     "type": "cds.String",
     "@description": "The ID of the file to use for this request",
     "@openapi.in": "path"
    }
   },
   "@Common.Label": "OpenAI",
   "@Core.Description": "Returns information about a specific file.",
   "@openapi.path": "/files/{file_id}",
   "returns": {
    "type": "OpenAI.API_types.OpenAIFile"
   }
  },
  "OpenAI.API.files__content": {
   "kind": "function",
   "params": {
    "file_id": {
     "type": "cds.String",
     "@description": "The ID of the file to use for this request",
     "@openapi.in": "path"
    }
   },
   "@Common.Label": "OpenAI",
   "@Core.Description": "Returns the contents of the specified file",
   "@openapi.path": "/files/{file_id}/content",
   "returns": {
    "type": "cds.String"
   }
  },
  "OpenAI.API.fine_tunes_post": {
   "kind": "action",
   "params": {
    "body": {
     "type": "OpenAI.API_types.CreateFineTuneRequest",
     "@openapi.in": "body"
    }
   },
   "@Common.Label": "OpenAI",
   "@Core.Description": "Creates a job that fine-tunes a specified model from a given dataset.\n\nResponse includes details of the enqueued job including job status and the name of the fine-tuned models once complete.\n\n[Learn more about Fine-tuning](/docs/guides/fine-tuning)\n",
   "@openapi.path": "/fine-tunes",
   "returns": {
    "type": "OpenAI.API_types.FineTune"
   }
  },
  "OpenAI.API.fine_tunes": {
   "kind": "function",
   "params": {},
   "@Common.Label": "OpenAI",
   "@Core.Description": "List your organization's fine-tuning jobs\n",
   "@openapi.path": "/fine-tunes",
   "returns": {
    "type": "OpenAI.API_types.ListFineTunesResponse"
   }
  },
  "OpenAI.API.fine_tunes_": {
   "kind": "function",
   "params": {
    "fine_tune_id": {
     "type": "cds.String",
     "@Core.Example.$Type": "Core.PrimitiveExampleValue",
     "@Core.Example.Value": "ft-AF1WoRqd3aJAHsqc9NY7iL8F",
     "@description": "The ID of the fine-tune job\n",
     "@openapi.in": "path"
    }
   },
   "@Common.Label": "OpenAI",
   "@Core.Description": "Gets info about the fine-tune job.\n\n[Learn more about Fine-tuning](/docs/guides/fine-tuning)\n",
   "@openapi.path": "/fine-tunes/{fine_tune_id}",
   "returns": {
    "type": "OpenAI.API_types.FineTune"
   }
  },
  "OpenAI.API.fine_tunes__cancel_post": {
   "kind": "action",
   "params": {
    "fine_tune_id": {
     "type": "cds.String",
     "@Core.Example.$Type": "Core.PrimitiveExampleValue",
     "@Core.Example.Value": "ft-AF1WoRqd3aJAHsqc9NY7iL8F",
     "@description": "The ID of the fine-tune job to cancel\n",
     "@openapi.in": "path"
    }
   },
   "@Common.Label": "OpenAI",
   "@Core.Description": "Immediately cancel a fine-tune job.\n",
   "@openapi.path": "/fine-tunes/{fine_tune_id}/cancel",
   "returns": {
    "type": "OpenAI.API_types.FineTune"
   }
  },
  "OpenAI.API.fine_tunes__events": {
   "kind": "function",
   "params": {
    "fine_tune_id": {
     "type": "cds.String",
     "@Core.Example.$Type": "Core.PrimitiveExampleValue",
     "@Core.Example.Value": "ft-AF1WoRqd3aJAHsqc9NY7iL8F",
     "@description": "The ID of the fine-tune job to get events for.\n",
     "@openapi.in": "path"
    },
    "stream": {
     "type": "cds.Boolean",
     "default": {
      "val": false
     },
     "@description": "Whether to stream events for the fine-tune job. If set to true,\nevents will be sent as data-only\n[server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format)\nas they become available. The stream will terminate with a\n`data: [DONE]` message when the job is finished (succeeded, cancelled,\nor failed).\n\nIf set to false, only events generated so far will be returned.\n",
     "@openapi.in": "query"
    }
   },
   "@Common.Label": "OpenAI",
   "@Core.Description": "Get fine-grained status updates for a fine-tune job.\n",
   "@openapi.path": "/fine-tunes/{fine_tune_id}/events",
   "returns": {
    "type": "OpenAI.API_types.ListFineTuneEventsResponse"
   }
  },
  "OpenAI.API.models": {
   "kind": "function",
   "params": {},
   "@Common.Label": "OpenAI",
   "@Core.Description": "Lists the currently available models, and provides basic information about each one such as the owner and availability.",
   "@openapi.path": "/models",
   "returns": {
    "type": "OpenAI.API_types.ListModelsResponse"
   }
  },
  "OpenAI.API.models_": {
   "kind": "function",
   "params": {
    "model": {
     "type": "cds.String",
     "@Core.Example.$Type": "Core.PrimitiveExampleValue",
     "@Core.Example.Value": "text-davinci-001",
     "@description": "The ID of the model to use for this request",
     "@openapi.in": "path"
    }
   },
   "@Common.Label": "OpenAI",
   "@Core.Description": "Retrieves a model instance, providing basic information about the model such as the owner and permissioning.",
   "@openapi.path": "/models/{model}",
   "returns": {
    "type": "OpenAI.API_types.Model"
   }
  },
  "OpenAI.API.models__delete": {
   "kind": "action",
   "params": {
    "model": {
     "type": "cds.String",
     "@Core.Example.$Type": "Core.PrimitiveExampleValue",
     "@Core.Example.Value": "curie:ft-acmeco-2021-03-03-21-44-20",
     "@description": "The model to delete",
     "@openapi.in": "path"
    }
   },
   "@Common.Label": "OpenAI",
   "@Core.Description": "Delete a fine-tuned model. You must have the Owner role in your organization.",
   "@openapi.method": "DELETE",
   "@openapi.path": "/models/{model}",
   "returns": {
    "type": "OpenAI.API_types.DeleteModelResponse"
   }
  },
  "OpenAI.API.moderations_post": {
   "kind": "action",
   "params": {
    "body": {
     "type": "OpenAI.API_types.CreateModerationRequest",
     "@openapi.in": "body"
    }
   },
   "@Common.Label": "OpenAI",
   "@Core.Description": "Classifies if text violates OpenAI's Content Policy",
   "@openapi.path": "/moderations",
   "returns": {
    "type": "OpenAI.API_types.CreateModerationResponse"
   }
  },
  "OpenAI.API_types.Error": {
   "elements": {
    "type": {
     "type": "cds.String"
    },
    "message": {
     "type": "cds.String"
    },
    "param": {
     "type": "cds.String"
    },
    "code": {
     "type": "cds.String"
    }
   },
   "kind": "type"
  },
  "OpenAI.API_types.ErrorResponse": {
   "elements": {
    "error": {
     "type": "OpenAI.API_types.Error"
    }
   },
   "kind": "type"
  },
  "OpenAI.API_types.ListModelsResponse": {
   "elements": {
    "object": {
     "type": "cds.String"
    },
    "data": {
     "items": {
      "type": "OpenAI.API_types.Model"
     }
    }
   },
   "kind": "type"
  },
  "OpenAI.API_types.DeleteModelResponse": {
   "elements": {
    "id": {
     "type": "cds.String"
    },
    "object": {
     "type": "cds.String"
    },
    "deleted": {
     "type": "cds.Boolean"
    }
   },
   "kind": "type"
  },
  "OpenAI.API_types.CreateCompletionRequest": {
   "elements": {
    "model": {
     "@description": "ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them.\n",
     "type": "cds.String"
    },
    "prompt": {
     "@description": "The prompt(s) to generate completions for, encoded as a string, array of strings, array of tokens, or array of token arrays.\n\nNote that <|endoftext|> is the document separator that the model sees during training, so if a prompt is not specified the model will generate as if from the beginning of a new document.\n",
     "type": "common.JSON",
     "@JSON.Schema": "{\"default\":\"<|endoftext|>\",\"nullable\":true,\"oneOf\":[{\"type\":\"string\",\"default\":\"\",\"example\":\"This is a test.\"},{\"type\":\"array\",\"items\":{\"type\":\"string\",\"default\":\"\",\"example\":\"This is a test.\"}},{\"type\":\"array\",\"minItems\":1,\"items\":{\"type\":\"integer\"},\"example\":\"[1212, 318, 257, 1332, 13]\"},{\"type\":\"array\",\"minItems\":1,\"items\":{\"type\":\"array\",\"minItems\":1,\"items\":{\"type\":\"integer\"}},\"example\":\"[[1212, 318, 257, 1332, 13]]\"}]}"
    },
    "suffix": {
     "@description": "The suffix that comes after a completion of inserted text.",
     "type": "cds.String",
     "default": {
      "val": null
     },
     "@Core.Example.$Type": "Core.PrimitiveExampleValue",
     "@Core.Example.Value": "test."
    },
    "max_tokens": {
     "@description": "The maximum number of [tokens](/tokenizer) to generate in the completion.\n\nThe token count of your prompt plus `max_tokens` cannot exceed the model's context length. [Example Python code](https://github.com/openai/openai-cookbook/blob/main/examples/How_to_count_tokens_with_tiktoken.ipynb) for counting tokens.\n",
     "type": "cds.Integer",
     "default": {
      "val": 16
     },
     "@Core.Example.$Type": "Core.PrimitiveExampleValue",
     "@Core.Example.Value": 16
    },
    "temperature": {
     "@description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.\n\nWe generally recommend altering this or `top_p` but not both.\n",
     "type": "cds.Decimal",
     "default": {
      "val": 1
     },
     "@Core.Example.$Type": "Core.PrimitiveExampleValue",
     "@Core.Example.Value": 1
    },
    "top_p": {
     "@description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.\n\nWe generally recommend altering this or `temperature` but not both.\n",
     "type": "cds.Decimal",
     "default": {
      "val": 1
     },
     "@Core.Example.$Type": "Core.PrimitiveExampleValue",
     "@Core.Example.Value": 1
    },
    "n": {
     "@description": "How many completions to generate for each prompt.\n\n**Note:** Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for `max_tokens` and `stop`.\n",
     "type": "cds.Integer",
     "default": {
      "val": 1
     },
     "@Core.Example.$Type": "Core.PrimitiveExampleValue",
     "@Core.Example.Value": 1
    },
    "stream": {
     "@description": "Whether to stream back partial progress. If set, tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message. [Example Python code](https://github.com/openai/openai-cookbook/blob/main/examples/How_to_stream_completions.ipynb).\n",
     "type": "cds.Boolean",
     "default": {
      "val": false
     }
    },
    "logprobs": {
     "@description": "Include the log probabilities on the `logprobs` most likely tokens, as well the chosen tokens. For example, if `logprobs` is 5, the API will return a list of the 5 most likely tokens. The API will always return the `logprob` of the sampled token, so there may be up to `logprobs+1` elements in the response.\n\nThe maximum value for `logprobs` is 5.\n",
     "type": "cds.Integer",
     "default": {
      "val": null
     }
    },
    "echo": {
     "@description": "Echo back the prompt in addition to the completion\n",
     "type": "cds.Boolean",
     "default": {
      "val": false
     }
    },
    "stop": {
     "@description": "Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence.\n",
     "type": "common.JSON",
     "@JSON.Schema": "{\"default\":null,\"nullable\":true,\"oneOf\":[{\"type\":\"string\",\"default\":\"<|endoftext|>\",\"example\":\"\\n\",\"nullable\":true},{\"type\":\"array\",\"minItems\":1,\"maxItems\":4,\"items\":{\"type\":\"string\",\"example\":\"[\\\"\\\\n\\\"]\"}}]}"
    },
    "presence_penalty": {
     "@description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.\n\n[See more information about frequency and presence penalties.](/docs/api-reference/parameter-details)\n",
     "type": "cds.Decimal",
     "default": {
      "val": 0
     }
    },
    "frequency_penalty": {
     "@description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.\n\n[See more information about frequency and presence penalties.](/docs/api-reference/parameter-details)\n",
     "type": "cds.Decimal",
     "default": {
      "val": 0
     }
    },
    "best_of": {
     "@description": "Generates `best_of` completions server-side and returns the \"best\" (the one with the highest log probability per token). Results cannot be streamed.\n\nWhen used with `n`, `best_of` controls the number of candidate completions and `n` specifies how many to return – `best_of` must be greater than `n`.\n\n**Note:** Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for `max_tokens` and `stop`.\n",
     "type": "cds.Integer",
     "default": {
      "val": 1
     }
    },
    "logit_bias": {
     "@description": "Modify the likelihood of specified tokens appearing in the completion.\n\nAccepts a json object that maps tokens (specified by their token ID in the GPT tokenizer) to an associated bias value from -100 to 100. You can use this [tokenizer tool](/tokenizer?view=bpe) (which works for both GPT-2 and GPT-3) to convert text to token IDs. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.\n\nAs an example, you can pass `{\"50256\": -100}` to prevent the <|endoftext|> token from being generated.\n",
     "elements": {}
    },
    "user": {
     "@description": "A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).\n",
     "type": "cds.String",
     "@Core.Example.$Type": "Core.PrimitiveExampleValue",
     "@Core.Example.Value": "user-1234"
    }
   },
   "kind": "type"
  },
  "OpenAI.API_types.CreateCompletionResponse": {
   "elements": {
    "id": {
     "type": "cds.String"
    },
    "object": {
     "type": "cds.String"
    },
    "created": {
     "type": "cds.Integer"
    },
    "model": {
     "type": "cds.String"
    },
    "choices": {
     "items": {
      "elements": {
       "text": {
        "type": "cds.String"
       },
       "index": {
        "type": "cds.Integer"
       },
       "logprobs": {
        "elements": {
         "tokens": {
          "items": {
           "type": "cds.String"
          }
         },
         "token_logprobs": {
          "items": {
           "type": "cds.Decimal"
          }
         },
         "top_logprobs": {
          "items": {
           "elements": {}
          }
         },
         "text_offset": {
          "items": {
           "type": "cds.Integer"
          }
         }
        }
       },
       "finish_reason": {
        "type": "cds.String",
        "@assert.range": true,
        "enum": {
         "stop": {},
         "length": {}
        }
       }
      }
     }
    },
    "usage": {
     "elements": {
      "prompt_tokens": {
       "type": "cds.Integer"
      },
      "completion_tokens": {
       "type": "cds.Integer"
      },
      "total_tokens": {
       "type": "cds.Integer"
      }
     }
    }
   },
   "kind": "type"
  },
  "OpenAI.API_types.ChatCompletionRequestMessage": {
   "elements": {
    "role": {
     "@description": "The role of the messages author. One of `system`, `user`, `assistant`, or `function`.",
     "type": "cds.String",
     "@assert.range": true,
     "enum": {
      "system": {},
      "user": {},
      "assistant": {},
      "function": {}
     }
    },
    "content": {
     "@description": "The contents of the message. `content` is required for all messages, and may be null for assistant messages with function calls.",
     "type": "cds.String"
    },
    "name": {
     "@description": "The name of the author of this message. `name` is required if role is `function`, and it should be the name of the function whose response is in the `content`. May contain a-z, A-Z, 0-9, and underscores, with a maximum length of 64 characters.",
     "type": "cds.String"
    },
    "function_call": {
     "@description": "The name and arguments of a function that should be called, as generated by the model.",
     "elements": {
      "name": {
       "@description": "The name of the function to call.",
       "type": "cds.String"
      },
      "arguments": {
       "@description": "The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.",
       "type": "cds.String"
      }
     }
    }
   },
   "kind": "type"
  },
  "OpenAI.API_types.ChatCompletionFunctionParameters": {
   "@description": "The parameters the functions accepts, described as a JSON Schema object. See the [guide](/docs/guides/gpt/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format.\n\nTo describe a function that accepts no parameters, provide the value `{\"type\": \"object\", \"properties\": {}}`.",
   "elements": {},
   "kind": "type"
  },
  "OpenAI.API_types.ChatCompletionFunctions": {
   "elements": {
    "name": {
     "@description": "The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.",
     "type": "cds.String"
    },
    "description": {
     "@description": "A description of what the function does, used by the model to choose when and how to call the function.",
     "type": "cds.String"
    },
    "parameters": {
     "type": "OpenAI.API_types.ChatCompletionFunctionParameters"
    }
   },
   "kind": "type"
  },
  "OpenAI.API_types.ChatCompletionResponseMessage": {
   "elements": {
    "role": {
     "@description": "The role of the author of this message.",
     "type": "cds.String",
     "@assert.range": true,
     "enum": {
      "system": {},
      "user": {},
      "assistant": {},
      "function": {}
     }
    },
    "content": {
     "@description": "The contents of the message.",
     "type": "cds.String"
    },
    "function_call": {
     "@description": "The name and arguments of a function that should be called, as generated by the model.",
     "elements": {
      "name": {
       "@description": "The name of the function to call.",
       "type": "cds.String"
      },
      "arguments": {
       "@description": "The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.",
       "type": "cds.String"
      }
     }
    }
   },
   "kind": "type"
  },
  "OpenAI.API_types.ChatCompletionStreamResponseDelta": {
   "elements": {
    "role": {
     "@description": "The role of the author of this message.",
     "type": "cds.String",
     "@assert.range": true,
     "enum": {
      "system": {},
      "user": {},
      "assistant": {},
      "function": {}
     }
    },
    "content": {
     "@description": "The contents of the chunk message.",
     "type": "cds.String"
    },
    "function_call": {
     "@description": "The name and arguments of a function that should be called, as generated by the model.",
     "elements": {
      "name": {
       "@description": "The name of the function to call.",
       "type": "cds.String"
      },
      "arguments": {
       "@description": "The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.",
       "type": "cds.String"
      }
     }
    }
   },
   "kind": "type"
  },
  "OpenAI.API_types.CreateChatCompletionRequest": {
   "elements": {
    "model": {
     "@description": "ID of the model to use. See the [model endpoint compatibility](/docs/models/model-endpoint-compatibility) table for details on which models work with the Chat API.",
     "type": "cds.String",
     "@Core.Example.$Type": "Core.PrimitiveExampleValue",
     "@Core.Example.Value": "gpt-3.5-turbo"
    },
    "messages": {
     "@description": "A list of messages comprising the conversation so far. [Example Python code](https://github.com/openai/openai-cookbook/blob/main/examples/How_to_format_inputs_to_ChatGPT_models.ipynb).",
     "items": {
      "type": "OpenAI.API_types.ChatCompletionRequestMessage"
     }
    },
    "functions": {
     "@description": "A list of functions the model may generate JSON inputs for.",
     "items": {
      "type": "OpenAI.API_types.ChatCompletionFunctions"
     }
    },
    "function_call": {
     "@description": "Controls how the model responds to function calls. \"none\" means the model does not call a function, and responds to the end-user. \"auto\" means the model can pick between an end-user or calling a function.  Specifying a particular function via `{\"name\":\\ \"my_function\"}` forces the model to call that function. \"none\" is the default when no functions are present. \"auto\" is the default if functions are present.",
     "type": "common.JSON",
     "@JSON.Schema": "{\"oneOf\":[{\"type\":\"string\",\"enum\":[\"none\",\"auto\"]},{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\",\"description\":\"The name of the function to call.\"}},\"required\":[\"name\"]}]}"
    },
    "temperature": {
     "@description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.\n\nWe generally recommend altering this or `top_p` but not both.\n",
     "type": "cds.Decimal",
     "default": {
      "val": 1
     },
     "@Core.Example.$Type": "Core.PrimitiveExampleValue",
     "@Core.Example.Value": 1
    },
    "top_p": {
     "@description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.\n\nWe generally recommend altering this or `temperature` but not both.\n",
     "type": "cds.Decimal",
     "default": {
      "val": 1
     },
     "@Core.Example.$Type": "Core.PrimitiveExampleValue",
     "@Core.Example.Value": 1
    },
    "n": {
     "@description": "How many chat completion choices to generate for each input message.",
     "type": "cds.Integer",
     "default": {
      "val": 1
     },
     "@Core.Example.$Type": "Core.PrimitiveExampleValue",
     "@Core.Example.Value": 1
    },
    "stream": {
     "@description": "If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message. [Example Python code](https://github.com/openai/openai-cookbook/blob/main/examples/How_to_stream_completions.ipynb).\n",
     "type": "cds.Boolean",
     "default": {
      "val": false
     }
    },
    "stop": {
     "@description": "Up to 4 sequences where the API will stop generating further tokens.\n",
     "type": "common.JSON",
     "@JSON.Schema": "{\"default\":null,\"oneOf\":[{\"type\":\"string\",\"nullable\":true},{\"type\":\"array\",\"minItems\":1,\"maxItems\":4,\"items\":{\"type\":\"string\"}}]}"
    },
    "max_tokens": {
     "@description": "The maximum number of [tokens](/tokenizer) to generate in the chat completion.\n\nThe total length of input tokens and generated tokens is limited by the model's context length. [Example Python code](https://github.com/openai/openai-cookbook/blob/main/examples/How_to_count_tokens_with_tiktoken.ipynb) for counting tokens.\n",
     "type": "cds.Integer",
     "default": {
      "val": "inf"
     }
    },
    "presence_penalty": {
     "@description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.\n\n[See more information about frequency and presence penalties.](/docs/api-reference/parameter-details)\n",
     "type": "cds.Decimal",
     "default": {
      "val": 0
     }
    },
    "frequency_penalty": {
     "@description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.\n\n[See more information about frequency and presence penalties.](/docs/api-reference/parameter-details)\n",
     "type": "cds.Decimal",
     "default": {
      "val": 0
     }
    },
    "logit_bias": {
     "@description": "Modify the likelihood of specified tokens appearing in the completion.\n\nAccepts a json object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.\n",
     "elements": {}
    },
    "user": {
     "@description": "A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).\n",
     "type": "cds.String",
     "@Core.Example.$Type": "Core.PrimitiveExampleValue",
     "@Core.Example.Value": "user-1234"
    }
   },
   "kind": "type"
  },
  "OpenAI.API_types.CreateChatCompletionResponse": {
   "elements": {
    "id": {
     "type": "cds.String"
    },
    "object": {
     "type": "cds.String"
    },
    "created": {
     "type": "cds.Integer"
    },
    "model": {
     "type": "cds.String"
    },
    "choices": {
     "items": {
      "elements": {
       "index": {
        "type": "cds.Integer"
       },
       "message": {
        "type": "OpenAI.API_types.ChatCompletionResponseMessage"
       },
       "finish_reason": {
        "type": "cds.String",
        "@assert.range": true,
        "enum": {
         "stop": {},
         "length": {},
         "function_call": {}
        }
       }
      }
     }
    },
    "usage": {
     "elements": {
      "prompt_tokens": {
       "type": "cds.Integer"
      },
      "completion_tokens": {
       "type": "cds.Integer"
      },
      "total_tokens": {
       "type": "cds.Integer"
      }
     }
    }
   },
   "kind": "type"
  },
  "OpenAI.API_types.CreateChatCompletionStreamResponse": {
   "elements": {
    "id": {
     "type": "cds.String"
    },
    "object": {
     "type": "cds.String"
    },
    "created": {
     "type": "cds.Integer"
    },
    "model": {
     "type": "cds.String"
    },
    "choices": {
     "items": {
      "elements": {
       "index": {
        "type": "cds.Integer"
       },
       "delta": {
        "type": "OpenAI.API_types.ChatCompletionStreamResponseDelta"
       },
       "finish_reason": {
        "type": "cds.String",
        "@assert.range": true,
        "enum": {
         "stop": {},
         "length": {},
         "function_call": {}
        }
       }
      }
     }
    }
   },
   "kind": "type"
  },
  "OpenAI.API_types.CreateEditRequest": {
   "elements": {
    "model": {
     "@description": "ID of the model to use. You can use the `text-davinci-edit-001` or `code-davinci-edit-001` model with this endpoint.",
     "type": "cds.String",
     "@Core.Example.$Type": "Core.PrimitiveExampleValue",
     "@Core.Example.Value": "text-davinci-edit-001"
    },
    "input": {
     "@description": "The input text to use as a starting point for the edit.",
     "type": "cds.String",
     "default": {
      "val": ""
     },
     "@Core.Example.$Type": "Core.PrimitiveExampleValue",
     "@Core.Example.Value": "What day of the wek is it?"
    },
    "instruction": {
     "@description": "The instruction that tells the model how to edit the prompt.",
     "type": "cds.String",
     "@Core.Example.$Type": "Core.PrimitiveExampleValue",
     "@Core.Example.Value": "Fix the spelling mistakes."
    },
    "n": {
     "@description": "How many edits to generate for the input and instruction.",
     "type": "cds.Integer",
     "default": {
      "val": 1
     },
     "@Core.Example.$Type": "Core.PrimitiveExampleValue",
     "@Core.Example.Value": 1
    },
    "temperature": {
     "@description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.\n\nWe generally recommend altering this or `top_p` but not both.\n",
     "type": "cds.Decimal",
     "default": {
      "val": 1
     },
     "@Core.Example.$Type": "Core.PrimitiveExampleValue",
     "@Core.Example.Value": 1
    },
    "top_p": {
     "@description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.\n\nWe generally recommend altering this or `temperature` but not both.\n",
     "type": "cds.Decimal",
     "default": {
      "val": 1
     },
     "@Core.Example.$Type": "Core.PrimitiveExampleValue",
     "@Core.Example.Value": 1
    }
   },
   "kind": "type"
  },
  "OpenAI.API_types.CreateEditResponse": {
   "elements": {
    "object": {
     "type": "cds.String"
    },
    "created": {
     "type": "cds.Integer"
    },
    "choices": {
     "items": {
      "elements": {
       "text": {
        "type": "cds.String"
       },
       "index": {
        "type": "cds.Integer"
       },
       "logprobs": {
        "elements": {
         "tokens": {
          "items": {
           "type": "cds.String"
          }
         },
         "token_logprobs": {
          "items": {
           "type": "cds.Decimal"
          }
         },
         "top_logprobs": {
          "items": {
           "elements": {}
          }
         },
         "text_offset": {
          "items": {
           "type": "cds.Integer"
          }
         }
        }
       },
       "finish_reason": {
        "type": "cds.String",
        "@assert.range": true,
        "enum": {
         "stop": {},
         "length": {}
        }
       }
      }
     }
    },
    "usage": {
     "elements": {
      "prompt_tokens": {
       "type": "cds.Integer"
      },
      "completion_tokens": {
       "type": "cds.Integer"
      },
      "total_tokens": {
       "type": "cds.Integer"
      }
     }
    }
   },
   "kind": "type"
  },
  "OpenAI.API_types.CreateImageRequest": {
   "elements": {
    "prompt": {
     "@description": "A text description of the desired image(s). The maximum length is 1000 characters.",
     "type": "cds.String",
     "@Core.Example.$Type": "Core.PrimitiveExampleValue",
     "@Core.Example.Value": "A cute baby sea otter"
    },
    "n": {
     "@description": "The number of images to generate. Must be between 1 and 10.",
     "type": "cds.Integer",
     "default": {
      "val": 1
     },
     "@Core.Example.$Type": "Core.PrimitiveExampleValue",
     "@Core.Example.Value": 1
    },
    "size": {
     "@description": "The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`.",
     "type": "cds.String",
     "@assert.range": true,
     "enum": {
      "_256x256": {
       "val": "256x256"
      },
      "_512x512": {
       "val": "512x512"
      },
      "_1024x1024": {
       "val": "1024x1024"
      }
     },
     "default": {
      "val": "1024x1024"
     },
     "@Core.Example.$Type": "Core.PrimitiveExampleValue",
     "@Core.Example.Value": "1024x1024"
    },
    "response_format": {
     "@description": "The format in which the generated images are returned. Must be one of `url` or `b64_json`.",
     "type": "cds.String",
     "@assert.range": true,
     "enum": {
      "url": {},
      "b64_json": {}
     },
     "default": {
      "val": "url"
     },
     "@Core.Example.$Type": "Core.PrimitiveExampleValue",
     "@Core.Example.Value": "url"
    },
    "user": {
     "@description": "A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).\n",
     "type": "cds.String",
     "@Core.Example.$Type": "Core.PrimitiveExampleValue",
     "@Core.Example.Value": "user-1234"
    }
   },
   "kind": "type"
  },
  "OpenAI.API_types.ImagesResponse": {
   "elements": {
    "created": {
     "type": "cds.Integer"
    },
    "data": {
     "items": {
      "elements": {
       "url": {
        "type": "cds.String"
       },
       "b64_json": {
        "type": "cds.String"
       }
      }
     }
    }
   },
   "kind": "type"
  },
  "OpenAI.API_types.CreateImageEditRequest": {
   "elements": {
    "image": {
     "@description": "The image to edit. Must be a valid PNG file, less than 4MB, and square. If mask is not provided, image must have transparency, which will be used as the mask.",
     "type": "cds.LargeBinary"
    },
    "mask": {
     "@description": "An additional image whose fully transparent areas (e.g. where alpha is zero) indicate where `image` should be edited. Must be a valid PNG file, less than 4MB, and have the same dimensions as `image`.",
     "type": "cds.LargeBinary"
    },
    "prompt": {
     "@description": "A text description of the desired image(s). The maximum length is 1000 characters.",
     "type": "cds.String",
     "@Core.Example.$Type": "Core.PrimitiveExampleValue",
     "@Core.Example.Value": "A cute baby sea otter wearing a beret"
    },
    "n": {
     "@description": "The number of images to generate. Must be between 1 and 10.",
     "type": "cds.Integer",
     "default": {
      "val": 1
     },
     "@Core.Example.$Type": "Core.PrimitiveExampleValue",
     "@Core.Example.Value": 1
    },
    "size": {
     "@description": "The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`.",
     "type": "cds.String",
     "@assert.range": true,
     "enum": {
      "_256x256": {
       "val": "256x256"
      },
      "_512x512": {
       "val": "512x512"
      },
      "_1024x1024": {
       "val": "1024x1024"
      }
     },
     "default": {
      "val": "1024x1024"
     },
     "@Core.Example.$Type": "Core.PrimitiveExampleValue",
     "@Core.Example.Value": "1024x1024"
    },
    "response_format": {
     "@description": "The format in which the generated images are returned. Must be one of `url` or `b64_json`.",
     "type": "cds.String",
     "@assert.range": true,
     "enum": {
      "url": {},
      "b64_json": {}
     },
     "default": {
      "val": "url"
     },
     "@Core.Example.$Type": "Core.PrimitiveExampleValue",
     "@Core.Example.Value": "url"
    },
    "user": {
     "@description": "A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).\n",
     "type": "cds.String",
     "@Core.Example.$Type": "Core.PrimitiveExampleValue",
     "@Core.Example.Value": "user-1234"
    }
   },
   "kind": "type"
  },
  "OpenAI.API_types.CreateImageVariationRequest": {
   "elements": {
    "image": {
     "@description": "The image to use as the basis for the variation(s). Must be a valid PNG file, less than 4MB, and square.",
     "type": "cds.LargeBinary"
    },
    "n": {
     "@description": "The number of images to generate. Must be between 1 and 10.",
     "type": "cds.Integer",
     "default": {
      "val": 1
     },
     "@Core.Example.$Type": "Core.PrimitiveExampleValue",
     "@Core.Example.Value": 1
    },
    "size": {
     "@description": "The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`.",
     "type": "cds.String",
     "@assert.range": true,
     "enum": {
      "_256x256": {
       "val": "256x256"
      },
      "_512x512": {
       "val": "512x512"
      },
      "_1024x1024": {
       "val": "1024x1024"
      }
     },
     "default": {
      "val": "1024x1024"
     },
     "@Core.Example.$Type": "Core.PrimitiveExampleValue",
     "@Core.Example.Value": "1024x1024"
    },
    "response_format": {
     "@description": "The format in which the generated images are returned. Must be one of `url` or `b64_json`.",
     "type": "cds.String",
     "@assert.range": true,
     "enum": {
      "url": {},
      "b64_json": {}
     },
     "default": {
      "val": "url"
     },
     "@Core.Example.$Type": "Core.PrimitiveExampleValue",
     "@Core.Example.Value": "url"
    },
    "user": {
     "@description": "A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).\n",
     "type": "cds.String",
     "@Core.Example.$Type": "Core.PrimitiveExampleValue",
     "@Core.Example.Value": "user-1234"
    }
   },
   "kind": "type"
  },
  "OpenAI.API_types.CreateModerationRequest": {
   "elements": {
    "input": {
     "@description": "The input text to classify",
     "type": "common.JSON",
     "@JSON.Schema": "{\"oneOf\":[{\"type\":\"string\",\"default\":\"\",\"example\":\"I want to kill them.\"},{\"type\":\"array\",\"items\":{\"type\":\"string\",\"default\":\"\",\"example\":\"I want to kill them.\"}}]}"
    },
    "model": {
     "@description": "Two content moderations models are available: `text-moderation-stable` and `text-moderation-latest`.\n\nThe default is `text-moderation-latest` which will be automatically upgraded over time. This ensures you are always using our most accurate model. If you use `text-moderation-stable`, we will provide advanced notice before updating the model. Accuracy of `text-moderation-stable` may be slightly lower than for `text-moderation-latest`.\n",
     "type": "cds.String",
     "default": {
      "val": "text-moderation-latest"
     },
     "@Core.Example.$Type": "Core.PrimitiveExampleValue",
     "@Core.Example.Value": "text-moderation-stable"
    }
   },
   "kind": "type"
  },
  "OpenAI.API_types.CreateModerationResponse": {
   "elements": {
    "id": {
     "type": "cds.String"
    },
    "model": {
     "type": "cds.String"
    },
    "results": {
     "items": {
      "elements": {
       "flagged": {
        "type": "cds.Boolean"
       },
       "categories": {
        "elements": {
         "hate": {
          "type": "cds.Boolean"
         },
         "hate_threatening": {
          "type": "cds.Boolean",
          "@openapi.name": "hate/threatening"
         },
         "self_harm": {
          "type": "cds.Boolean",
          "@openapi.name": "self-harm"
         },
         "sexual": {
          "type": "cds.Boolean"
         },
         "sexual_minors": {
          "type": "cds.Boolean",
          "@openapi.name": "sexual/minors"
         },
         "violence": {
          "type": "cds.Boolean"
         },
         "violence_graphic": {
          "type": "cds.Boolean",
          "@openapi.name": "violence/graphic"
         }
        }
       },
       "category_scores": {
        "elements": {
         "hate": {
          "type": "cds.Decimal"
         },
         "hate_threatening": {
          "type": "cds.Decimal",
          "@openapi.name": "hate/threatening"
         },
         "self_harm": {
          "type": "cds.Decimal",
          "@openapi.name": "self-harm"
         },
         "sexual": {
          "type": "cds.Decimal"
         },
         "sexual_minors": {
          "type": "cds.Decimal",
          "@openapi.name": "sexual/minors"
         },
         "violence": {
          "type": "cds.Decimal"
         },
         "violence_graphic": {
          "type": "cds.Decimal",
          "@openapi.name": "violence/graphic"
         }
        }
       }
      }
     }
    }
   },
   "kind": "type"
  },
  "OpenAI.API_types.ListFilesResponse": {
   "elements": {
    "object": {
     "type": "cds.String"
    },
    "data": {
     "items": {
      "type": "OpenAI.API_types.OpenAIFile"
     }
    }
   },
   "kind": "type"
  },
  "OpenAI.API_types.CreateFileRequest": {
   "elements": {
    "file": {
     "@description": "Name of the [JSON Lines](https://jsonlines.readthedocs.io/en/latest/) file to be uploaded.\n\nIf the `purpose` is set to \"fine-tune\", each line is a JSON record with \"prompt\" and \"completion\" fields representing your [training examples](/docs/guides/fine-tuning/prepare-training-data).\n",
     "type": "cds.LargeBinary"
    },
    "purpose": {
     "@description": "The intended purpose of the uploaded documents.\n\nUse \"fine-tune\" for [Fine-tuning](/docs/api-reference/fine-tunes). This allows us to validate the format of the uploaded file.\n",
     "type": "cds.String"
    }
   },
   "kind": "type"
  },
  "OpenAI.API_types.DeleteFileResponse": {
   "elements": {
    "id": {
     "type": "cds.String"
    },
    "object": {
     "type": "cds.String"
    },
    "deleted": {
     "type": "cds.Boolean"
    }
   },
   "kind": "type"
  },
  "OpenAI.API_types.CreateFineTuneRequest": {
   "elements": {
    "training_file": {
     "@description": "The ID of an uploaded file that contains training data.\n\nSee [upload file](/docs/api-reference/files/upload) for how to upload a file.\n\nYour dataset must be formatted as a JSONL file, where each training\nexample is a JSON object with the keys \"prompt\" and \"completion\".\nAdditionally, you must upload your file with the purpose `fine-tune`.\n\nSee the [fine-tuning guide](/docs/guides/fine-tuning/creating-training-data) for more details.\n",
     "type": "cds.String",
     "@Core.Example.$Type": "Core.PrimitiveExampleValue",
     "@Core.Example.Value": "file-ajSREls59WBbvgSzJSVWxMCB"
    },
    "validation_file": {
     "@description": "The ID of an uploaded file that contains validation data.\n\nIf you provide this file, the data is used to generate validation\nmetrics periodically during fine-tuning. These metrics can be viewed in\nthe [fine-tuning results file](/docs/guides/fine-tuning/analyzing-your-fine-tuned-model).\nYour train and validation data should be mutually exclusive.\n\nYour dataset must be formatted as a JSONL file, where each validation\nexample is a JSON object with the keys \"prompt\" and \"completion\".\nAdditionally, you must upload your file with the purpose `fine-tune`.\n\nSee the [fine-tuning guide](/docs/guides/fine-tuning/creating-training-data) for more details.\n",
     "type": "cds.String",
     "@Core.Example.$Type": "Core.PrimitiveExampleValue",
     "@Core.Example.Value": "file-XjSREls59WBbvgSzJSVWxMCa"
    },
    "model": {
     "@description": "The name of the base model to fine-tune. You can select one of \"ada\",\n\"babbage\", \"curie\", \"davinci\", or a fine-tuned model created after 2022-04-21.\nTo learn more about these models, see the\n[Models](https://platform.openai.com/docs/models) documentation.\n",
     "type": "cds.String",
     "default": {
      "val": "curie"
     },
     "@Core.Example.$Type": "Core.PrimitiveExampleValue",
     "@Core.Example.Value": "curie"
    },
    "n_epochs": {
     "@description": "The number of epochs to train the model for. An epoch refers to one\nfull cycle through the training dataset.\n",
     "type": "cds.Integer",
     "default": {
      "val": 4
     }
    },
    "batch_size": {
     "@description": "The batch size to use for training. The batch size is the number of\ntraining examples used to train a single forward and backward pass.\n\nBy default, the batch size will be dynamically configured to be\n~0.2% of the number of examples in the training set, capped at 256 -\nin general, we've found that larger batch sizes tend to work better\nfor larger datasets.\n",
     "type": "cds.Integer",
     "default": {
      "val": null
     }
    },
    "learning_rate_multiplier": {
     "@description": "The learning rate multiplier to use for training.\nThe fine-tuning learning rate is the original learning rate used for\npretraining multiplied by this value.\n\nBy default, the learning rate multiplier is the 0.05, 0.1, or 0.2\ndepending on final `batch_size` (larger learning rates tend to\nperform better with larger batch sizes). We recommend experimenting\nwith values in the range 0.02 to 0.2 to see what produces the best\nresults.\n",
     "type": "cds.Decimal",
     "default": {
      "val": null
     }
    },
    "prompt_loss_weight": {
     "@description": "The weight to use for loss on the prompt tokens. This controls how\nmuch the model tries to learn to generate the prompt (as compared\nto the completion which always has a weight of 1.0), and can add\na stabilizing effect to training when completions are short.\n\nIf prompts are extremely long (relative to completions), it may make\nsense to reduce this weight so as to avoid over-prioritizing\nlearning the prompt.\n",
     "type": "cds.Decimal",
     "default": {
      "val": 0.01
     }
    },
    "compute_classification_metrics": {
     "@description": "If set, we calculate classification-specific metrics such as accuracy\nand F-1 score using the validation set at the end of every epoch.\nThese metrics can be viewed in the [results file](/docs/guides/fine-tuning/analyzing-your-fine-tuned-model).\n\nIn order to compute classification metrics, you must provide a\n`validation_file`. Additionally, you must\nspecify `classification_n_classes` for multiclass classification or\n`classification_positive_class` for binary classification.\n",
     "type": "cds.Boolean",
     "default": {
      "val": false
     }
    },
    "classification_n_classes": {
     "@description": "The number of classes in a classification task.\n\nThis parameter is required for multiclass classification.\n",
     "type": "cds.Integer",
     "default": {
      "val": null
     }
    },
    "classification_positive_class": {
     "@description": "The positive class in binary classification.\n\nThis parameter is needed to generate precision, recall, and F1\nmetrics when doing binary classification.\n",
     "type": "cds.String",
     "default": {
      "val": null
     }
    },
    "classification_betas": {
     "@description": "If this is provided, we calculate F-beta scores at the specified\nbeta values. The F-beta score is a generalization of F-1 score.\nThis is only used for binary classification.\n\nWith a beta of 1 (i.e. the F-1 score), precision and recall are\ngiven the same weight. A larger beta score puts more weight on\nrecall and less on precision. A smaller beta score puts more weight\non precision and less on recall.\n",
     "items": {
      "type": "cds.Decimal"
     }
    },
    "suffix": {
     "@description": "A string of up to 40 characters that will be added to your fine-tuned model name.\n\nFor example, a `suffix` of \"custom-model-name\" would produce a model name like `ada:ft-your-org:custom-model-name-2022-02-15-04-21-04`.\n",
     "type": "cds.String",
     "length": 40,
     "default": {
      "val": null
     }
    }
   },
   "kind": "type"
  },
  "OpenAI.API_types.ListFineTunesResponse": {
   "elements": {
    "object": {
     "type": "cds.String"
    },
    "data": {
     "items": {
      "type": "OpenAI.API_types.FineTune"
     }
    }
   },
   "kind": "type"
  },
  "OpenAI.API_types.ListFineTuneEventsResponse": {
   "elements": {
    "object": {
     "type": "cds.String"
    },
    "data": {
     "items": {
      "type": "OpenAI.API_types.FineTuneEvent"
     }
    }
   },
   "kind": "type"
  },
  "OpenAI.API_types.CreateEmbeddingRequest": {
   "elements": {
    "model": {
     "@description": "ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them.\n",
     "type": "cds.String",
     "@Core.Example.$Type": "Core.PrimitiveExampleValue",
     "@Core.Example.Value": "text-embedding-ada-002"
    },
    "input": {
     "@description": "Input text to embed, encoded as a string or array of tokens. To embed multiple inputs in a single request, pass an array of strings or array of token arrays. Each input must not exceed the max input tokens for the model (8191 tokens for `text-embedding-ada-002`). [Example Python code](https://github.com/openai/openai-cookbook/blob/main/examples/How_to_count_tokens_with_tiktoken.ipynb) for counting tokens.\n",
     "type": "common.JSON",
     "@JSON.Schema": "{\"example\":\"The quick brown fox jumped over the lazy dog\",\"oneOf\":[{\"type\":\"string\",\"default\":\"\",\"example\":\"This is a test.\"},{\"type\":\"array\",\"items\":{\"type\":\"string\",\"default\":\"\",\"example\":\"This is a test.\"}},{\"type\":\"array\",\"minItems\":1,\"items\":{\"type\":\"integer\"},\"example\":\"[1212, 318, 257, 1332, 13]\"},{\"type\":\"array\",\"minItems\":1,\"items\":{\"type\":\"array\",\"minItems\":1,\"items\":{\"type\":\"integer\"}},\"example\":\"[[1212, 318, 257, 1332, 13]]\"}]}"
    },
    "user": {
     "@description": "A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).\n",
     "type": "cds.String",
     "@Core.Example.$Type": "Core.PrimitiveExampleValue",
     "@Core.Example.Value": "user-1234"
    }
   },
   "kind": "type"
  },
  "OpenAI.API_types.CreateEmbeddingResponse": {
   "elements": {
    "object": {
     "type": "cds.String"
    },
    "model": {
     "type": "cds.String"
    },
    "data": {
     "items": {
      "elements": {
       "index": {
        "type": "cds.Integer"
       },
       "object": {
        "type": "cds.String"
       },
       "embedding": {
        "items": {
         "type": "cds.Decimal"
        }
       }
      }
     }
    },
    "usage": {
     "elements": {
      "prompt_tokens": {
       "type": "cds.Integer"
      },
      "total_tokens": {
       "type": "cds.Integer"
      }
     }
    }
   },
   "kind": "type"
  },
  "OpenAI.API_types.CreateTranscriptionRequest": {
   "elements": {
    "file": {
     "@description": "The audio file object (not file name) to transcribe, in one of these formats: mp3, mp4, mpeg, mpga, m4a, wav, or webm.\n",
     "type": "cds.LargeBinary"
    },
    "model": {
     "@description": "ID of the model to use. Only `whisper-1` is currently available.\n",
     "type": "cds.String",
     "@Core.Example.$Type": "Core.PrimitiveExampleValue",
     "@Core.Example.Value": "whisper-1"
    },
    "prompt": {
     "@description": "An optional text to guide the model's style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should match the audio language.\n",
     "type": "cds.String"
    },
    "response_format": {
     "@description": "The format of the transcript output, in one of these options: json, text, srt, verbose_json, or vtt.\n",
     "type": "cds.String",
     "default": {
      "val": "json"
     }
    },
    "temperature": {
     "@description": "The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit.\n",
     "type": "cds.Decimal",
     "default": {
      "val": 0
     }
    },
    "language": {
     "@description": "The language of the input audio. Supplying the input language in [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) format will improve accuracy and latency.\n",
     "type": "cds.String"
    }
   },
   "kind": "type"
  },
  "OpenAI.API_types.CreateTranscriptionResponse": {
   "elements": {
    "text": {
     "type": "cds.String"
    }
   },
   "kind": "type"
  },
  "OpenAI.API_types.CreateTranslationRequest": {
   "elements": {
    "file": {
     "@description": "The audio file object (not file name) translate, in one of these formats: mp3, mp4, mpeg, mpga, m4a, wav, or webm.\n",
     "type": "cds.LargeBinary"
    },
    "model": {
     "@description": "ID of the model to use. Only `whisper-1` is currently available.\n",
     "type": "cds.String",
     "@Core.Example.$Type": "Core.PrimitiveExampleValue",
     "@Core.Example.Value": "whisper-1"
    },
    "prompt": {
     "@description": "An optional text to guide the model's style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should be in English.\n",
     "type": "cds.String"
    },
    "response_format": {
     "@description": "The format of the transcript output, in one of these options: json, text, srt, verbose_json, or vtt.\n",
     "type": "cds.String",
     "default": {
      "val": "json"
     }
    },
    "temperature": {
     "@description": "The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit.\n",
     "type": "cds.Decimal",
     "default": {
      "val": 0
     }
    }
   },
   "kind": "type"
  },
  "OpenAI.API_types.CreateTranslationResponse": {
   "elements": {
    "text": {
     "type": "cds.String"
    }
   },
   "kind": "type"
  },
  "OpenAI.API_types.Model": {
   "@title": "Model",
   "elements": {
    "id": {
     "type": "cds.String"
    },
    "object": {
     "type": "cds.String"
    },
    "created": {
     "type": "cds.Integer"
    },
    "owned_by": {
     "type": "cds.String"
    }
   },
   "kind": "type"
  },
  "OpenAI.API_types.OpenAIFile": {
   "@title": "OpenAIFile",
   "elements": {
    "id": {
     "type": "cds.String"
    },
    "object": {
     "type": "cds.String"
    },
    "bytes": {
     "type": "cds.Integer"
    },
    "created_at": {
     "type": "cds.Integer"
    },
    "filename": {
     "type": "cds.String"
    },
    "purpose": {
     "type": "cds.String"
    },
    "status": {
     "type": "cds.String"
    },
    "status_details": {
     "type": "cds.String"
    }
   },
   "kind": "type"
  },
  "OpenAI.API_types.FineTune": {
   "@title": "FineTune",
   "elements": {
    "id": {
     "type": "cds.String"
    },
    "object": {
     "type": "cds.String"
    },
    "created_at": {
     "type": "cds.Integer"
    },
    "updated_at": {
     "type": "cds.Integer"
    },
    "model": {
     "type": "cds.String"
    },
    "fine_tuned_model": {
     "type": "cds.String"
    },
    "organization_id": {
     "type": "cds.String"
    },
    "status": {
     "type": "cds.String"
    },
    "hyperparams": {
     "elements": {
      "n_epochs": {
       "type": "cds.Integer"
      },
      "batch_size": {
       "type": "cds.Integer"
      },
      "prompt_loss_weight": {
       "type": "cds.Decimal"
      },
      "learning_rate_multiplier": {
       "type": "cds.Decimal"
      },
      "compute_classification_metrics": {
       "type": "cds.Boolean"
      },
      "classification_positive_class": {
       "type": "cds.String"
      },
      "classification_n_classes": {
       "type": "cds.Integer"
      }
     }
    },
    "training_files": {
     "items": {
      "type": "OpenAI.API_types.OpenAIFile"
     }
    },
    "validation_files": {
     "items": {
      "type": "OpenAI.API_types.OpenAIFile"
     }
    },
    "result_files": {
     "items": {
      "type": "OpenAI.API_types.OpenAIFile"
     }
    },
    "events": {
     "items": {
      "type": "OpenAI.API_types.FineTuneEvent"
     }
    }
   },
   "kind": "type"
  },
  "OpenAI.API_types.FineTuneEvent": {
   "@title": "FineTuneEvent",
   "elements": {
    "object": {
     "type": "cds.String"
    },
    "created_at": {
     "type": "cds.Integer"
    },
    "level": {
     "type": "cds.String"
    },
    "message": {
     "type": "cds.String"
    }
   },
   "kind": "type"
  },
  "common.JSON": {
   "kind": "type",
   "type": "cds.LargeString"
  }
 },
 "meta": {
  "creator": "cds-import-openapi"
 }
}